## @IBOutlet & @IBAction

  @: Annotation -> 주로 변수나 메소드의 성격을 컴파일러에게 알려주는 역할
  @IBOutlet -> 프로퍼티에 추가 / @IBAction -> 메서드에 추가 : 인터페이스 빌더에 관련된 것임
  
  @IBOutlet: 화면상의 객체를 소스 코드에서 참조하기 위해 사용하는 어노테이션
  @IBAction: 객체의 이벤트를 제어할 때 사용하는 어노테이션
  
  ** @IBOutlet 연결 시 주의할 점 [Storage]
  Strong / Weak -> 메모리 회수 정책의 차이
    > 속성 변수는 기본적으로 Strong 타입
    > 일반적으로 변수나 상수는 다른 곳에서 참조되고 있을 경우, 메모리에서 제거되지 않는 것이 원칙이지만, Weak 타입으로 선언된 변수는 시스템이 임의로
      메모리에서 제거가 가능함
    > Strong 타입 객체들끼리 상호 참조되는 일이 발생할 경우, 참조 카운트가 0이 되지 않기 때문에 메모리 누수로 이어질 수 있음. 한 쪽 객체를 Weak 타입으로 지정하면 임의로 제거가 가능하기 때문에 
      순환참조로부터 벗어날 수 있음 (* ARC[Auto Referencing Count] 참조)
      
  ** @IBOutlet 변수의 초기값은 앱이 실행될 때 코코아 터치 프레임워크에 의해 주입되기 때문에 임의로 지정 못함!
  
## 인터페이스 빌더 객체와 클래스를 연결하는 방법
  (1). 인터페이스 빌더 뷰컨트롤러에서 보조에디터 뷰컨트롤러 클래스로 객체를 드래그
  (2). 커넥션 인스펙터 탭에서 뷰컨트롤러 클래스로 드래그
  (3). 보조에디터에서 프로퍼티와 메서드를 정의한 후에 스토리 보드쪽으로 드래그
  (4). 보조에디터에서 프로퍼티와 메서드를 정의한 후에 커넥션 인스펙터 탭에서 스토리보드 객체로 직접 드래그
  (5). 문서 개요창에서 객체를 선택한 후에 보조 에디터로 직접 드래그
      
  
    
